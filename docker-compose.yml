version: '3.7'

x-environment:
  &py-enviroment
  DEBUG: 'False'
  NODE_ENV: 'production'
  DEV_ENV: 'True'  # necessary to have nginx connect to web container
  SECRET_KEY: local_unsafe_key
  DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
  OCW_STUDIO_SECURE_SSL_REDIRECT: 'False'
  OCW_STUDIO_DB_DISABLE_SSL: 'True'
  CELERY_TASK_ALWAYS_EAGER: 'False'
  CELERY_BROKER_URL: redis://redis:6379/4
  CELERY_RESULT_BACKEND: redis://redis:6379/4
  DOCKER_HOST: ${DOCKER_HOST:-missing}
  WEBPACK_DEV_SERVER_HOST: ${WEBPACK_DEV_SERVER_HOST:-localhost}
  DJANGO_SETTINGS_MODULE: "main.settings"
  PYTHONPATH: "."

services:
  db:
    image: postgres:12.8
    ports:
      - "5431:5432"
    environment:
      POSTGRES_PASSWORD: postgres

  redis:
    image: redis:6.0.10
    ports:
      - "6379"

  nginx:
    image: nginx:1.9.5
    ports:
      - "8043:8043"
    links:
      - web
    networks:
      default:
        aliases:
          # this ensures that containers route this hostname back to the web app
          - "xpro.odl.local"
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      /bin/bash -c '
      sleep 3 &&
      python3 manage.py collectstatic --noinput &&
      python3 manage.py migrate --noinput &&
      uwsgi uwsgi.ini --honour-stdin'
    stdin_open: true
    tty: true
    ports:
      - "8041:8041"
    environment:
      << : *py-enviroment
      PORT: 8041
    env_file: .env
    links:
      - db
      - redis

  watch:
    image: node:15.14.0
    working_dir: /src
    command: >
      /bin/bash -c './webpack_dev_server.sh --install'
    ports:
      - "8042:8042"
    environment:
      NODE_ENV: 'production'
      DOCKER_HOST: ${DOCKER_HOST:-missing}
      CONTAINER_NAME: 'watch'
    env_file: .env

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    environment: *py-enviroment
    env_file: .env
    command: >
      /bin/bash -c '
      sleep 3;
      celery -A main.celery:app worker -Q publish,batch,default, -B -l ${OCW_STUDIO_LOG_LEVEL:-INFO}'
    links:
      - db
      - redis

  concourse-db:
    image: postgres:11.6
    environment:
      POSTGRES_DB: concourse
      POSTGRES_USER: postgres
      PGDATA: /database
    profiles: ["concourse"]

  concourse:
    image: concourse/concourse:7.7.0
    command: quickstart
    privileged: true
    depends_on: [concourse-db]
    ports: ["8080:8080"]
    stdin_open: true
    tty: true
    environment:
      CONCOURSE_POSTGRES_HOST: concourse-db
      CONCOURSE_POSTGRES_USER: postgres
      CONCOURSE_POSTGRES_DATABASE: concourse
      CONCOURSE_EXTERNAL_URL: ${CONCOURSE_URL:-http://concourse:8080}
      CONCOURSE_ADD_LOCAL_USER: ${CONCOURSE_USER_NAME:-test}:${CONCOURSE_PASSWORD:-test}  # pragma: allowlist secret
      CONCOURSE_MAIN_TEAM_LOCAL_USER: ${CONCOURSE_USER_NAME:-test}
      CONCOURSE_WORKER_BAGGAGECLAIM_DRIVER: overlay
      CONCOURSE_X_FRAME_OPTIONS: allow
      CONCOURSE_CONTENT_SECURITY_POLICY: "*"
      CONCOURSE_CLUSTER_NAME: ocw
      CONCOURSE_WORKER_CONTAINERD_DNS_SERVER: "8.8.8.8"
      CONCOURSE_WORKER_RUNTIME: "containerd"
      CONCOURSE_ENABLE_PIPELINE_INSTANCES: "true"
      CONCOURSE_ENABLE_ACROSS_STEP: "true"
    profiles: ["concourse"]
    links:
      - web
      - nginx
