---
resource_types:
  - name: http-resource
    type: registry-image
    source:
      repository: jgriff/http-resource
      tag: latest
  - name: s3-resource-iam
    type: registry-image
    source:
      repository: governmentpaas/s3-resource
      tag: latest
resources:
  - name: slack-webhook
    type: slack-alert
    check_every: never
    source:
      url: ((slack-url))
      disabled: false
  - name: ocw-hugo-themes
    type: git
    source:
      uri: ((ocw-hugo-themes-uri))
      branch: ((ocw-hugo-themes-branch))
  - name: ocw-hugo-projects
    type: git
    source:
      uri: ((ocw-hugo-projects-uri))
      branch: ((ocw-hugo-projects-branch))
  # START ONLINE-ONLY
  - name: webpack-json
    type: s3-resource-iam
    source:
      # START DEV-ONLY
      endpoint: ((endpoint-url))
      access_key_id: ((minio-root-user))
      secret_access_Key: ((minio-root-password))
      # END DEV-ONLY
      bucket: ((artifacts-bucket))
      versioned_file: ocw-hugo-themes/((ocw-hugo-themes-branch))/webpack.json
  # END ONLINE-ONLY

# START ONLINE-ONLY
task-config: &webhook-config
  platform: linux
  image_resource:
    type: registry-image
    source: {repository: curlimages/curl}
# END ONLINE-ONLY

task-purge-cdn-cache: &task-purge-cdn-cache
  task: clear-cdn-cache
  timeout: 1m
  attempts: 3
  config:
    platform: linux
    image_resource:
      type: registry-image
      source: {repository: curlimages/curl}
    run:
      # START NON-DEV
      path: curl
      args:
        - -f
        - -X
        - POST
        - -H
        - 'Fastly-Key: ((fastly_((version)).api_token))'
        - -H
        - 'Fastly-Soft-Purge: 1'
        - https://api.fastly.com/service/((fastly_((version)).service_id))/purge_all
    # END NON-DEV
    # START DEV-ONLY
      path: echo
      args: [Skipping cdn cache purge (this is a dev environment)]
    # END DEV-ONLY

jobs:
- name: mass-publish
  serial: true
  plan:
  - get: ocw-hugo-themes
    timeout: 1m
    attempts: 3
    trigger: false
  # START ONLINE-ONLY
  - get: webpack-json
    # START NON-DEV
    trigger: ((trigger))
    # END NON-DEV
  # END ONLINE-ONLY
  - get: ocw-hugo-projects
    timeout: 1m
    attempts: 3
    # START NON-DEV
    trigger: ((trigger))
    # END NON-DEV
  # START OFFLINE-ONLY
  - task: build-ocw-hugo-themes
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: mitodl/ocw-course-publisher, tag: 0.6}
      inputs:
      - name: ocw-hugo-themes
      outputs:
      - name: ocw-hugo-themes
      params:
        SEARCH_API_URL: ((search-api-url))
      run:
        path: sh
        args:
        - -exc
        - |
          cd ocw-hugo-themes
          yarn install --immutable
          npm run build:webpack
          npm run build:githash
          mkdir -p ./base-theme/static/static_shared/
          cp -r ./base-theme/dist/static_shared/* ./base-theme/static/static_shared/
          find ./base-theme/static/static_shared -name "*.js.map" -type f -delete
  # END OFFLINE-ONLY
  - task: get-sites
    timeout: 2m
    attempts: 3
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: bash, tag: latest}
      outputs:
        - name: publishable_sites
      run:
        path: sh
        args:
        - -exc
        - |
          wget -O publishable_sites/sites.json --header="Authorization: Bearer ((api-token))" "((ocw-studio-url))/api/publish/?version=((version))((starter))"
  - task: get-repo-build-course-publish-course
    attempts: 1
    timeout: 1200m
    params:
      API_BEARER_TOKEN: ((api-token))
      GTM_ACCOUNT_ID: ((gtm-account-id))
      OCW_IMPORT_STARTER_SLUG: ((ocw-import-starter-slug))
      OCW_COURSE_STARTER_SLUG: ((ocw-course-starter-slug))
      OCW_STUDIO_BASE_URL: ((ocw-studio-url))
      STATIC_API_BASE_URL: ((static-api-base-url))
      GIT_KEY: ((git-private-key-var))
      SITEMAP_DOMAIN: ((sitemap-domain))
      PREFIX: ((prefix))
      SENTRY_DSN: ((ocw-hugo-themes-sentry-dsn))
      NOINDEX: ((noindex))
      # START DEV-ONLY
      AWS_ACCESS_KEY_ID: ((minio-root-user))
      AWS_SECRET_ACCESS_KEY: ((minio-root-password))
      RESOURCE_BASE_URL: ((resource-base-url))
      # END DEV-ONLY
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: mitodl/ocw-course-publisher, tag: 0.6}
      inputs:
        - name: publishable_sites
        - name: ocw-hugo-projects
        - name: ocw-hugo-themes
        # START ONLINE-ONLY
        - name: webpack-json
        # END ONLINE-ONLY
      run:
        path: bash
        args:
          - -ec
          - |
            ANY_FAILED=0
            CURDIR=$(pwd)
            if [[ "$GIT_KEY" != "" ]]
            then
              echo $GIT_KEY > $CURDIR/git.key
              sed -i -E "s/(-----BEGIN[^-]+-----)(.+)(-----END[^-]+-----)/-----BEGINSSHKEY-----\2\-----ENDSSHKEY-----/" git.key
              sed -i -E "s/\s/\n/g" git.key
              sed -i -E "s/SSHKEY/ OPENSSH PRIVATE KEY/g" git.key
              chmod 400 $CURDIR/git.key
              GITKEYSSH="-i $CURDIR/git.key"
            else
              GITKEYSSH=""
            fi
            process_site()
            {
              cd $CURDIR
              NAME=$(echo $1 | jq -c '.name' | tr -d '"')
              SHORT_ID=$(echo $1 | jq -c '.short_id' | tr -d '"')
              STARTER_SLUG=$(echo $1| jq -c '.starter_slug' | tr -d '"')
              S3_PATH=$(echo $1 | jq -c '.s3_path' | tr -d '"')
              SITE_URL=$(echo $1 | jq -c '.site_url' | tr -d '"')
              BASE_URL=$(echo $1 | jq -c '.base_url' | tr -d '"')
              if [[ "$PREFIX" != "" ]]
              then
                PREFIX="/$PREFIX"
              fi
              echo "STARTING PUBLISH OF $NAME" > /dev/tty
              if [[ "$SITE_URL" == null || "$S3_PATH" == null ]]
              then
                return 1
              fi
              if [[ "$GITKEYSSH" != "" ]]
              then
                git -c core.sshCommand="ssh $GITKEYSSH -o StrictHostKeyChecking=no" clone -b ((ocw-site-repo-branch)) ((markdown-uri))/$SHORT_ID.git --quiet || return 1
              else
                git clone -b ((ocw-site-repo-branch)) ((markdown-uri))/$SHORT_ID.git --quiet || return 1
              fi
              cd $CURDIR/$SHORT_ID
              # START ONLINE-ONLY
              cp ../webpack-json/webpack.json ../ocw-hugo-themes/base-theme/data
              # END ONLINE-ONLY
              # START OFFLINE-ONLY
              echo "PULLING IN STATIC RESOURCES FOR $NAME" > /dev/tty
              STUDIO_S3_RESULT=$(aws s3((cli-endpoint-url)) sync s3://((ocw-studio-bucket))/$S3_PATH ./content/static_resources --exclude *.mp4 --only-show-errors) || STUDIO_S3_RESULT=1
              if [[ $STUDIO_S3_RESULT == 1 ]]
              then
                echo "SYNCING s3://((ocw-studio-bucket))/$S3_PATH to ./content/static_resources FAILED FOR $NAME" > /dev/tty
                return 1
              fi
              mkdir -p ./static/static_resources
              if compgen -G "./content/static_resources/*.html" > /dev/null
              then
                mv ./content/static_resources/*.html ./static/static_resources
              fi
              touch ./content/static_resources/_index.md
              # END OFFLINE-ONLY
              echo "RUNNING HUGO BUILD FOR $NAME" > /dev/tty
              # START ONLINE-ONLY
              HUGO_RESULT=$(hugo ((hugo-args-online))) || HUGO_RESULT=1
              # END ONLINE-ONLY
              # START OFFLINE-ONLY
              HUGO_RESULT=$(hugo ((hugo-args-offline))) || HUGO_RESULT=1
              # END OFFLINE-ONLY
              if [[ $HUGO_RESULT == 1 ]]
              then
                echo "HUGO BUILD FAILED FOR $NAME" > /dev/tty
                return 1
              fi
              cd $CURDIR
              echo "STARTING S3 SYNC FOR $NAME" > /dev/tty
              # START OFFLINE-ONLY
              cd $CURDIR/$SHORT_ID/public
              OFFLINE_S3_PATH=((offline-bucket))$PREFIX/$BASE_URL
              if ! [[ $OFFLINE_S3_PATH == ((offline-bucket))/ ]]
              then
                DELETE=" --delete"
              fi
              PUBLISH_S3_RESULT=$(aws s3((cli-endpoint-url)) sync ./ s3://((offline-bucket))$PREFIX/$BASE_URL --metadata site-id=$NAME --only-show-errors $DELETE) || PUBLISH_S3_RESULT=1
              if [[ $PUBLISH_S3_RESULT == 1 ]]
              then
                echo "SYNCING $SHORT_ID to s3://((offline-bucket))$PREFIX/$SITE_URL failed for $NAME" > /dev/tty
                return 1
              fi
              zip $SHORT_ID.zip -r ./
              PUBLISH_S3_RESULT=$(aws s3((cli-endpoint-url)) sync ./ s3://((web-bucket))$PREFIX/$BASE_URL --exclude="*" --include="$SHORT_ID.zip" --metadata site-id=$NAME --only-show-errors) || PUBLISH_S3_RESULT=1
              if [[ $PUBLISH_S3_RESULT == 1 ]]
              then
                echo "SYNCING $SHORT_ID.zip to s3://((web-bucket))$PREFIX/$SITE_URL failed for $NAME" > /dev/tty
                return 1
              fi
              rm $SHORT_ID.zip
              cd $CURDIR
              # END OFFLINE-ONLY
              # START ONLINE-ONLY
              STUDIO_S3_RESULT=$(aws s3((cli-endpoint-url)) sync s3://((ocw-studio-bucket))/$S3_PATH s3://((web-bucket))$PREFIX/$SITE_URL --metadata site-id=$NAME --only-show-errors) || STUDIO_S3_RESULT=1
              if [[ $STUDIO_S3_RESULT == 1 ]]
              then
                echo "SYNCING s3://((ocw-studio-bucket))/$S3_PATH to s3://((web-bucket))$PREFIX/$SITE_URL FAILED FOR $NAME" > /dev/tty
                return 1
              fi
              PUBLISH_S3_RESULT=$(aws s3((cli-endpoint-url)) sync $SHORT_ID/public s3://((web-bucket))$PREFIX/$BASE_URL --metadata site-id=$NAME --only-show-errors) || PUBLISH_S3_RESULT=1
              if [[ $PUBLISH_S3_RESULT == 1 ]]
              then
                echo "SYNCING $SHORT_ID/public to s3://((web-bucket))$PREFIX/$SITE_URL failed for $NAME" > /dev/tty
                return 1
              fi
              # START NON-DEV
              curl -s -X POST -H 'Content-Type: application/json' --data '{"webhook_key":"((open-webhook-key))","prefix":"'"$SITE_URL"/'","version":"((version))"}' ((open-discussions-url))/api/v0/ocw_next_webhook/
              # END NON-DEV
              curl -s -X POST -H 'Content-Type: application/json' -H 'Authorization: Bearer ((api-token))' --data '{"version":"((version))","status":"succeeded"}' ((ocw-studio-url))/api/websites/$NAME/pipeline_status/
              # END ONLINE-ONLY
              rm -rf $SHORT_ID
              echo "PUBLISH OF $NAME COMPLETE" > /dev/tty
              return 0
            }
            fail_site()
            {
              NAME=$(echo $1 | jq -c '.name' | tr -d '"')
              echo "PUBLISH OF $NAME FAILED" > /dev/tty
              # START ONLINE-ONLY
              curl -s -X POST -H 'Content-Type: application/json' -H 'Authorization: Bearer ((api-token))' --data '{"version":"((version))","status":"errored"}' ((ocw-studio-url))/api/websites/$NAME/pipeline_status/
              # END ONLINE-ONLY
            }
            while read SITE; do
              RESULT=$(process_site $SITE) || RESULT=1
              if [[ $RESULT == 1 ]]
              then
                ANY_FAILED=1
                fail_site $SITE
              fi
            done <<< $(jq -c '.sites[]' publishable_sites/sites.json)
            if [[ $ANY_FAILED == 1 ]]
            then
              echo "FAILED BUILDS HAPPENED" > /dev/tty
              exit 1
            else
              echo "ALL BUILDS SUCCEEDED" > /dev/tty
              exit 0
            fi
    # START ONLINE-ONLY
    on_failure:
      try:
        do:
         - << : *task-purge-cdn-cache
    # END ONLINE-ONLY
  # START ONLINE-ONLY
  - << : *task-purge-cdn-cache
  # END ONLINE-ONLY
  on_failure:
    try:
      do:
      - put: slack-webhook
        timeout: 1m
        params:
          alert_type: failed
          text: Mass publish has failed. See Concourse ui (link below) for details.
  on_abort:
    try:
      do:
      - put: slack-webhook
        timeout: 1m
        params:
          alert_type: aborted
          text: User aborted during mass publish. See Concourse ui (link below) for details.