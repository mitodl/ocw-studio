---
resource_types:
  - name: http-resource
    type: docker-image
    source:
      repository: jgriff/http-resource
      tag: latest
  - name: s3-resource-iam
    type: docker-image
    source:
      repository: governmentpaas/s3-resource
      tag: latest
resources:
  - name: ocw-hugo-themes
    type: git
    source:
      uri: ((ocw-hugo-themes-uri))
      branch: ((ocw-hugo-themes-branch))
  - name: ocw-hugo-projects
    type: git
    source:
      uri: ((ocw-hugo-projects-uri))
      branch: ((ocw-hugo-projects-branch))
  - name: webpack-json
    type: s3-resource-iam
    source:
      bucket: ol-eng-artifacts
      versioned_file: ocw-hugo-themes/((ocw-hugo-themes-branch))/webpack.json
task-config: &webhook-config
  platform: linux
  image_resource:
    type: docker-image
    source: {repository: curlimages/curl}
jobs:
- name: mass-publish
  serial: true
  plan:
  - get: ocw-hugo-themes
    timeout: 1m
    attempts: 3
    trigger: false
  - get: webpack-json
    trigger: true
  - get: ocw-hugo-projects
    timeout: 1m
    attempts: 3
    trigger: true
  - task: get-sites
    timeout: 2m
    attempts: 3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: bash, tag: latest}
      outputs:
        - name: publishable_sites
      run:
        path: sh
        args:
        - -exc
        - |
          wget -O publishable_sites/sites.json --header="Authorization: Bearer ((api-token))" "((ocw-studio-url))/api/publish/?version=((version))"
  - task: get-repo-build-course-publish-course
    attempts: 3
    timeout: 300m
    params:
      OCW_IMPORT_STARTER_SLUG: ((ocw-import-starter-slug))
      OCW_STUDIO_BASE_URL: ((ocw-studio-url))
      STATIC_API_BASE_URL: ((static-api-base-url))
      GIT_KEY: ((git-private-key-var))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ardiea/ocw-course-publisher, tag: latest}
      inputs:
        - name: publishable_sites
        - name: ocw-hugo-projects
        - name: ocw-hugo-themes
        - name: webpack-json
      run:
        path: bash
        args:
          - -exc
          - |
            CURDIR=$(pwd)
            if [[ "$GIT_KEY" != "" ]]
            then
              echo $GIT_KEY > $CURDIR/git.key
              sed -i -E "s/(-----BEGIN[^-]+-----)(.+)(-----END[^-]+-----)/-----BEGINSSHKEY-----\2\-----ENDSSHKEY-----/" git.key  
              sed -i -E "s/\s/\n/g" git.key
              sed -i -E "s/SSHKEY/ OPENSSH PRIVATE KEY/g" git.key
              chmod 400 $CURDIR/git.key
              GITKEYSSH="-i $CURDIR/git.key"
            else
              GITKEYSSH=""
            fi
            process_site()
            {
                cd $CURDIR
                NAME=$(echo $1 | jq -c '.name' | tr -d '"')
                SHORT_ID=$(echo $1 | jq -c '.short_id' | tr -d '"')
                STARTER_SLUG=$(echo $1| jq -c '.starter_slug' | tr -d '"')
                SITE_URL=$(echo $1 | jq -c '.site_url' | tr -d '"')
                BASE_URL=$(echo $1 | jq -c '.base_url' | tr -d '"')
                git -c core.sshCommand="ssh $GITKEYSSH -o StrictHostKeyChecking=no" clone -b ((ocw-site-repo-branch)) ((markdown-uri))/$SHORT_ID.git || return 1
                cd $CURDIR/$SHORT_ID
                cp ../webpack-json/webpack.json ../ocw-hugo-themes/base-theme/data
                hugo --config ../ocw-hugo-projects/$STARTER_SLUG/config.yaml --baseUrl /$BASE_URL --themesDir ../ocw-hugo-themes/  || return 1
                cd $CURDIR
                aws s3 sync s3://((ocw-studio-bucket))/$SITE_URL s3://((ocw-bucket))/$SITE_URL --metadata site-id=$NAME || return 1            
                aws s3 sync $SHORT_ID/public s3://((ocw-bucket))/$BASE_URL --metadata site-id=$NAME || return 1
                curl -X POST -H 'Content-Type: application/json' -H 'Authorization: Bearer ((api-token))' --data '{"version":"((version))","status":"succeeded"}' ((ocw-studio-url))/api/websites/$NAME/pipeline_status/
                rm -rf $SHORT_ID
                return 0
            }
            fail_site()
            {
                NAME=$(echo $1 | jq -c '.name' | tr -d '"')
                curl -X POST -H 'Content-Type: application/json' -H 'Authorization: Bearer ((api-token))' --data '{"version":"((version))","status":"errored"}' ((ocw-studio-url))/api/websites/$NAME/pipeline_status/
            }
            jq -c '.sites[]' publishable_sites/sites.json | while read i; do
                 result=$(process_site $i) || result=1
                 echo "RESULT IS $result"
                 if [[ $result == 1 ]]
                 then
                   fail_site $i
                 fi
            done
  - task: clear-cdn-cache
    timeout: 1m
    attempts: 3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: curlimages/curl}
      run:
        path: curl
        args:
          - -f
          - -X
          - POST
          - -H
          - 'Fastly-Key: ((fastly.api_token))'
          - -H
          - 'Fastly-Soft-Purge: 1'
          - https://api.fastly.com/service/((fastly.service_id))/purge_all
