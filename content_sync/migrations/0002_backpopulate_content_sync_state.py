# Generated by Django 3.1.6 on 2021-04-15 19:13
import json
from hashlib import sha256

from django.core.paginator import Paginator
from django.db import migrations


def chunked_iterator(queryset):
    """Chunked iteration over a queryset to avoid loading it all into memory"""
    paginator = Paginator(queryset, 100)
    for page in range(1, paginator.num_pages + 1):
        for obj in paginator.page(page).object_list:
            yield obj


def backpopulate_content_sync_states(apps, schema_editor):
    """Backpopulate ContentSyncState for existing WebsiteContent records"""
    WebsiteContent = apps.get_model("websites", "WebsiteContent")
    ContentSyncState = apps.get_model("content_sync", "ContentSyncState")

    for content in chunked_iterator(WebsiteContent.objects.order_by("id")):
        ContentSyncState.objects.get_or_create(
            content=content,
            defaults=dict(
                current_checksum=sha256(
                    "\n".join(
                        [json.dumps(content.metadata), str(content.markdown)]
                    ).encode("utf-8")
                ).hexdigest()
            ),
        )


class Migration(migrations.Migration):

    dependencies = [
        ("content_sync", "0001_add_content_sync_state"),
    ]

    operations = [
        migrations.RunPython(
            backpopulate_content_sync_states, migrations.RunPython.noop
        )
    ]
