{
  "addons": [
    "heroku-postgresql:hobby-dev",
    "newrelic:wayne",
    "rediscloud:30"
  ],
  "buildpacks": [
    {
      "url": "https://github.com/heroku/heroku-buildpack-apt"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-nodejs"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-python"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-pgbouncer"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-nginx"
    }
  ],
  "description": "OCW Studio manages deployments for OCW courses.",
  "env": {
    "API_BEARER_TOKEN": {
      "description": "Authorization bearer token for webhook endpoints",
      "required": false
    },
    "AWS_ACCESS_KEY_ID": {
      "description": "AWS Access Key for S3 storage.",
      "required": false
    },
    "AWS_ACCOUNT_ID": {
      "description": "AWS Account ID",
      "required": false
    },
    "AWS_PREVIEW_BUCKET_NAME": {
      "description": "S3 preview bucket name.",
      "required": false
    },
    "AWS_PUBLISH_BUCKET_NAME": {
      "description": "S3 publish bucket name.",
      "required": false
    },
    "AWS_QUERYSTRING_AUTH": {
      "description": "Enables querystring auth for S3 urls",
      "required": false
    },
    "AWS_REGION": {
      "description": "AWS Region",
      "required": false
    },
    "AWS_ROLE_NAME": {
      "description": "AWS role name to be used for MediaConvert jobs",
      "required": false
    },
    "AWS_SECRET_ACCESS_KEY": {
      "description": "AWS Secret Key for S3 storage.",
      "required": false
    },
    "AWS_STORAGE_BUCKET_NAME": {
      "description": "S3 Bucket name.",
      "required": false
    },
    "CELERY_BROKER_URL": {
      "description": "Where celery should get tasks, default is Redis URL",
      "required": false
    },
    "CELERY_RESULT_BACKEND": {
      "description": "Where celery should put task results, default is Redis URL",
      "required": false
    },
    "CELERY_TASK_EAGER_PROPAGATES": {
      "description": "Early executed tasks propagate exceptions",
      "required": false
    },
    "CONCOURSE_HARD_PURGE": {
      "description": "Perform a hard purge of the fastly cache",
      "required": false
    },
    "CONCOURSE_IS_PRIVATE_REPO": {
      "description": "True if a git repo requires authentication to retrieve",
      "required": false
    },
    "CONCOURSE_PASSWORD": {
      "description": "The concourse-ci login password",
      "required": false
    },
    "CONCOURSE_TEAM": {
      "description": "The concourse-ci team",
      "required": false
    },
    "CONCOURSE_URL": {
      "description": "The concourse-ci URL",
      "required": false
    },
    "CONCOURSE_USERNAME": {
      "description": "The concourse-ci login username",
      "required": false
    },
    "CONTENT_SYNC_BACKEND": {
      "description": "The backend to sync websites/content with",
      "required": false
    },
    "CONTENT_SYNC_PIPELINE_BACKEND": {
      "description": "The pipeline backend name to preview/publish websites with",
      "required": false
    },
    "CONTENT_SYNC_RETRIES": {
      "description": "Number of times to retry backend sync attempts",
      "required": false
    },
    "DISABLE_WEBPACK_LOADER_STATS": {
      "description": "Disabled webpack loader stats",
      "required": false
    },
    "DJANGO_LOG_LEVEL": {
      "description": "The log level for django",
      "required": false
    },
    "DRIVE_IMPORT_RECENT_FILES_SECONDS": {
      "description": "The frequency to check for new google drive files/videos, in seconds",
      "required": false
    },
    "DRIVE_S3_UPLOAD_PREFIX": {
      "description": "Prefix to be used for S3 keys of files uploaded from Google Drive",
      "required": false
    },
    "DRIVE_SERVICE_ACCOUNT_CREDS": {
      "description": "The contents of the Service Account credentials JSON to use for Google API auth",
      "required": false
    },
    "DRIVE_SHARED_ID": {
      "description": "ID of the Shared Drive (a.k.a. Team Drive). This is equal to the top-level folder ID.",
      "required": false
    },
    "DRIVE_UPLOADS_PARENT_FOLDER_ID": {
      "description": "Gdrive folder for video uploads",
      "required": false
    },
    "FIELD_METADATA_TITLE": {
      "description": "The site metadata field for title",
      "required": false
    },
    "FIELD_RESOURCETYPE": {
      "description": "The site config metadata field for the resource type",
      "required": false
    },
    "GA_TRACKING_ID": {
      "description": "Google analytics tracking ID",
      "required": false
    },
    "GITHUB_APP_ID": {
      "description": "A github app id to use for Github API authentication",
      "required": false
    },
    "GITHUB_APP_PRIVATE_KEY": {
      "description": "A github app private key for authentication",
      "required": false
    },
    "GITHUB_RATE_LIMIT_CHECK": {
      "description": "True if the github domain has API rate limits",
      "required": false
    },
    "GITHUB_RATE_LIMIT_CUTOFF": {
      "description": "Number of remaining Github API calls that triggers throttling",
      "required": false
    },
    "GITHUB_RATE_LIMIT_MIN_SLEEP": {
      "description": "Minimum time to sleep between when throttling github calls",
      "required": false
    },
    "GITHUB_WEBHOOK_BRANCH": {
      "description": "Github branch to filter webhook requests against",
      "required": false
    },
    "GITHUB_WEBHOOK_KEY": {
      "description": "Github secret key sent by webhook requests",
      "required": false
    },
    "GIT_API_URL": {
      "description": "Base URL of git API",
      "required": false
    },
    "GIT_BRANCH_MAIN": {
      "description": "The default branch for a git repo",
      "required": false
    },
    "GIT_BRANCH_PREVIEW": {
      "description": "The preview branch for a git repo",
      "required": false
    },
    "GIT_BRANCH_RELEASE": {
      "description": "The release branch for a git repo",
      "required": false
    },
    "GIT_DEFAULT_USER_EMAIL": {
      "description": "The email for the default git committer",
      "required": false
    },
    "GIT_DEFAULT_USER_NAME": {
      "description": "The name for the default git committer",
      "required": false
    },
    "GIT_DOMAIN": {
      "description": "Base URL of github for site repos",
      "required": false
    },
    "GIT_ORGANIZATION": {
      "description": "The organization under which repos should be created",
      "required": false
    },
    "GIT_TOKEN": {
      "description": "An authentication token for git commands",
      "required": false
    },
    "HEROKU_APP_NAME": {
      "description": "The name of the review app",
      "required": false
    },
    "HOST_IP": {
      "description": "This server's host IP",
      "required": false
    },
    "MAILGUN_KEY": {
      "description": "The token for authenticating against the Mailgun API",
      "required": true
    },
    "MAILGUN_SENDER_DOMAIN": {
      "description": "The domain to send mailgun email through",
      "required": true
    },
    "MAX_S3_GET_ITERATIONS": {
      "description": "Max retry attempts to get an S3 object",
      "required": false
    },
    "MEDIA_ROOT": {
      "description": "The root directory for locally stored media. Typically not used.",
      "required": false
    },
    "MIDDLEWARE_FEATURE_FLAG_COOKIE_MAX_AGE_SECONDS": {
      "description": "Feature flag middleware cookie max age",
      "required": false
    },
    "MIDDLEWARE_FEATURE_FLAG_COOKIE_NAME": {
      "description": "Feature flag middleware cookie name",
      "required": false
    },
    "MIDDLEWARE_FEATURE_FLAG_QS_PREFIX": {
      "description": "Feature flag middleware querystring prefix",
      "required": false
    },
    "MITOL_MAIL_FORMAT_RECIPIENT_FUNC": {
      "description": "function to format email recipients",
      "required": false
    },
    "MITOL_MAIL_FROM_EMAIL": {
      "description": "E-mail to use for the from field",
      "required": false
    },
    "MITOL_MAIL_REPLY_TO_ADDRESS": {
      "description": "E-mail to use for reply-to address of emails",
      "required": false
    },
    "NEW_RELIC_APP_NAME": {
      "description": "Application identifier in New Relic."
    },
    "NODE_MODULES_CACHE": {
      "description": "If false, disables the node_modules cache to fix yarn install",
      "value": "false"
    },
    "OCW_GTM_ACCOUNT_ID": {
      "description": "The Google Tag Manager account ID to use in OCW site build pipelines",
      "required": false
    },
    "OCW_IMPORT_STARTER_SLUG": {
      "description": "The slug of the WebsiteStarter to assign to courses imported from ocw-to-hugo",
      "required": false
    },
    "OCW_NEXT_SEARCH_WEBHOOK_KEY": {
      "description": "Open discussions webhook key",
      "required": false
    },
    "OCW_STUDIO_ADMIN_EMAIL": {
      "description": "E-mail to send 500 reports to.",
      "required": false
    },
    "OCW_STUDIO_BASE_URL": {
      "description": "Base url for the application in the format PROTOCOL://HOSTNAME[:PORT]",
      "required": true
    },
    "OCW_STUDIO_DB_CONN_MAX_AGE": {
      "description": "Maximum age of connection to Postgres in seconds",
      "required": false
    },
    "OCW_STUDIO_DB_DISABLE_SSL": {
      "description": "Disables SSL to postgres if set to True",
      "required": false
    },
    "OCW_STUDIO_DB_DISABLE_SS_CURSORS": {
      "description": "Disables Postgres server side cursors",
      "required": false
    },
    "OCW_STUDIO_DRAFT_URL": {
      "description": "The base url of the preview site",
      "required": false
    },
    "OCW_STUDIO_EMAIL_BACKEND": {
      "description": "The default email backend to use for outgoing email. This is used in some places by django itself. See `NOTIFICATION_EMAIL_BACKEND` for the backend used for most application emails.",
      "required": false
    },
    "OCW_STUDIO_EMAIL_HOST": {
      "description": "Outgoing e-mail hostname",
      "required": false
    },
    "OCW_STUDIO_EMAIL_PASSWORD": {
      "description": "Outgoing e-mail auth password",
      "required": false
    },
    "OCW_STUDIO_EMAIL_PORT": {
      "description": "Outgoing e-mail port",
      "required": false
    },
    "OCW_STUDIO_EMAIL_TLS": {
      "description": "Outgoing e-mail TLS setting",
      "required": false
    },
    "OCW_STUDIO_EMAIL_USER": {
      "description": "Outgoing e-mail auth username",
      "required": false
    },
    "OCW_STUDIO_ENVIRONMENT": {
      "description": "The execution environment that the app is in (e.g. dev, staging, prod)",
      "required": true
    },
    "OCW_STUDIO_FROM_EMAIL": {
      "description": "E-mail to use for the from field",
      "required": false
    },
    "OCW_STUDIO_LIVE_URL": {
      "description": "The base url of the live site",
      "required": false
    },
    "OCW_STUDIO_LOG_HOST": {
      "description": "Remote syslog server hostname",
      "required": false
    },
    "OCW_STUDIO_LOG_HOST_PORT": {
      "description": "Remote syslog server port",
      "required": false
    },
    "OCW_STUDIO_LOG_LEVEL": {
      "description": "The log level default",
      "required": false
    },
    "OCW_STUDIO_SECURE_SSL_REDIRECT": {
      "description": "Application-level SSL redirect setting.",
      "required": false
    },
    "OCW_STUDIO_SITE_CONFIG_FILE": {
      "description": "Standard file name for site config files",
      "required": false
    },
    "OCW_STUDIO_SITE_ID": {
      "description": "The default site id for django sites framework",
      "required": false
    },
    "OCW_STUDIO_SUPPORT_EMAIL": {
      "description": "Email address listed for customer support",
      "required": false
    },
    "OCW_STUDIO_USE_S3": {
      "description": "Use S3 for storage backend (required on Heroku)",
      "required": false
    },
    "OPEN_DISCUSSIONS_URL": {
      "description": "Open discussions url",
      "required": false
    },
    "PGBOUNCER_DEFAULT_POOL_SIZE": {
      "value": "50"
    },
    "PGBOUNCER_MIN_POOL_SIZE": {
      "value": "5"
    },
    "PREPUBLISH_ACTIONS": {
      "description": "Actions to perform before publish",
      "required": false
    },
    "PUBLISH_INCOMPLETE_BUILD_STATUS_FREQUENCY": {
      "description": "Frequency (in seconds) to run a check on potentially stalled publish builds",
      "required": false
    },
    "PUBLISH_STATUS_CUTOFF": {
      "description": "Number of seconds to wait for a publish build to fail/succeed before assuming it's stuck",
      "required": false
    },
    "PUBLISH_STATUS_WAIT_TIME": {
      "description": "Number of seconds to wait for a publish status update before querying for it via api",
      "required": false
    },
    "REDISCLOUD_URL": {
      "description": "RedisCloud connection url",
      "required": false
    },
    "REDIS_MAX_CONNECTIONS": {
      "description": "Max number of redis connections",
      "required": false
    },
    "REDIS_URL": {
      "description": "Redis URL for non-production use",
      "required": false
    },
    "RESOURCE_TYPE_FIELDS": {
      "description": "List of site configuration fields that are used to store resource type",
      "required": false
    },
    "ROBOTS_CACHE_TIMEOUT": {
      "description": "How long the robots.txt file should be cached",
      "required": false
    },
    "ROOT_WEBSITE_NAME": {
      "description": "The Website name for the site at the root domain",
      "required": false
    },
    "S3_TRANSCRIPTS_PREFIX": {
      "description": "s3 transcripts subfolder",
      "required": false
    },
    "SEARCH_API_URL": {
      "description": "The URL to open discussions search to inject into the theme assets build",
      "required": false
    },
    "SECRET_KEY": {
      "description": "Django secret key.",
      "generator": "secret",
      "required": true
    },
    "SENTRY_DSN": {
      "description": "The connection settings for Sentry",
      "required": false
    },
    "SENTRY_LOG_LEVEL": {
      "description": "The log level for Sentry",
      "required": false
    },
    "SITE_NAME": {
      "description": "Site name",
      "required": false
    },
    "SITEMAP_DOMAIN": {
      "description": "The domain to be used in Hugo builds for fully qualified URLs in the sitemap",
      "required": false
    },
    "SOCIAL_AUTH_SAML_CONTACT_NAME": {
      "description": "The SAML contact name for our app",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ATTRIBUTE_EMAIL": {
      "description": "The IDP attribute for the user's email",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ATTRIBUTE_NAME": {
      "description": "The IDP attribute for the user's name",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ATTRIBUTE_PERM_ID": {
      "description": "The IDP attribute for the user's immutable ID",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ENTITY_ID": {
      "description": "The SAML IDP entity ID",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_URL": {
      "description": "The SAML IDP URL",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_X509": {
      "description": "The SAML IDP x509 certificate",
      "required": false
    },
    "SOCIAL_AUTH_SAML_LOGIN_URL": {
      "description": "The URL to redirect the user to for SAML login",
      "required": true
    },
    "SOCIAL_AUTH_SAML_ORG_DISPLAYNAME": {
      "description": "The SAML Organization display name",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SECURITY_ENCRYPTED": {
      "description": "If True, SMAL assertions should be encrypted",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SP_ENTITY_ID": {
      "description": "",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SP_PRIVATE_KEY": {
      "description": "The SAML private key",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SP_PUBLIC_CERT": {
      "description": "The SAML public certificate",
      "required": false
    },
    "STATUS_TOKEN": {
      "description": "Token to access the status API.",
      "required": false
    },
    "THREEPLAY_API_KEY": {
      "description": "3play api key",
      "required": false
    },
    "THREEPLAY_CALLBACK_KEY": {
      "description": "3play callback key",
      "required": false
    },
    "THREEPLAY_PROJECT_ID": {
      "description": "3play project id",
      "required": false
    },
    "UPDATE_MISSING_TRANSCRIPT_FREQUENCY": {
      "description": "The frequency to check for transcripts for published videos with blank transcripts",
      "required": false
    },
    "UPDATE_TAGGED_3PLAY_TRANSCRIPT_FREQUENCY": {
      "description": "The frequency to check for videos tagged as updated in 3play",
      "required": false
    },
    "USE_X_FORWARDED_HOST": {
      "description": "Set HOST header to original domain accessed by user",
      "required": false
    },
    "USE_X_FORWARDED_PORT": {
      "description": "Use the PORT from original url accessed by user",
      "required": false
    },
    "VIDEO_S3_TRANSCODE_PREFIX": {
      "description": "Prefix to be used for S3 keys of files transcoded from AWS MediaConvert",
      "required": false
    },
    "VIDEO_TRANSCODE_QUEUE": {
      "description": "Name of MediaConvert queue to use for transcoding",
      "required": false
    },
    "YT_ACCESS_TOKEN": {
      "description": "Youtube access token",
      "required": false
    },
    "YT_CATEGORY_ID": {
      "description": "Default video category ID for youtube",
      "required": false
    },
    "YT_CLIENT_ID": {
      "description": "Youtube Client ID",
      "required": false
    },
    "YT_CLIENT_SECRET": {
      "description": "Youtube client secret key",
      "required": false
    },
    "YT_FIELD_CAPTIONS": {
      "description": "The site config metadata field for the caption url",
      "required": false
    },
    "YT_FIELD_DESCRIPTION": {
      "description": "The site config metadata field for YouTube description",
      "required": false
    },
    "YT_FIELD_ID": {
      "description": "The site config metadata field for YouTube ID",
      "required": false
    },
    "YT_FIELD_SPEAKERS": {
      "description": "The site config metadata field for YouTube speakers",
      "required": false
    },
    "YT_FIELD_TAGS": {
      "description": "The site config metadata field for YouTube video tags",
      "required": false
    },
    "YT_FIELD_THUMBNAIL": {
      "description": "The site config metadata field for YouTube thumbnail url",
      "required": false
    },
    "YT_FIELD_TRANSCRIPT": {
      "description": "The site config metadata field for the transcript url",
      "required": false
    },
    "YT_PROJECT_ID": {
      "description": "Youtube project ID",
      "required": false
    },
    "YT_REFRESH_TOKEN": {
      "description": "YT_REFRESH_TOKEN",
      "required": false
    },
    "YT_STATUS_UPDATE_FREQUENCY": {
      "description": "The frequency to check for status updates on uploaded youtube videos",
      "required": false
    },
    "YT_UPLOAD_FREQUENCY": {
      "description": "The frequency to check for videos to upload to Youtube",
      "required": false
    },
    "YT_UPLOAD_LIMIT": {
      "description": "Max Youtube uploads allowed per day",
      "required": false
    }
  },
  "keywords": [
    "Django",
    "Python",
    "MIT",
    "Office of Digital Learning"
  ],
  "name": "ocw_studio",
  "repository": "https://github.com/mitodl/ocw-studio",
  "scripts": {
    "postdeploy": "./manage.py migrate --noinput"
  },
  "success_url": "/",
  "website": "https://github.com/mitodl/ocw-studio"
}