# Generated by Django 3.1.6 on 2021-05-07 22:25
from pathlib import Path

from django.db import migrations, models
from django.utils.text import slugify

CONTENT_FILENAME_MAX_LEN = 125
CONTENT_DIRPATH_MAX_LEN = 300


def _get_file_name_and_dirpath(filepath: str) -> tuple[str, str]:
    path_obj = Path(filepath)
    path_parts = path_obj.parts
    filename = path_obj.name[: -len(path_obj.suffix)]
    return (
        "/".join(path_parts[0 : (len(path_parts) - 1)]),
        # If filenames have dots in them, replace with dashes to simplify parsing of filenames.  # noqa: E501
        filename.replace(".", "-")[0:CONTENT_FILENAME_MAX_LEN],
    )


def backpopulate_filename_and_dirpath(apps, schema_editor):
    WebsiteContent = apps.get_model("websites", "WebsiteContent")
    # If content_filepath is not null, parse it to fill in both dirpath and filename fields  # noqa: E501
    content_qset = WebsiteContent.objects.exclude(content_filepath=None).values(
        "id", "content_filepath"
    )
    for content_dict in content_qset:
        dirpath, filename = _get_file_name_and_dirpath(content_dict["content_filepath"])
        WebsiteContent.objects.filter(id=content_dict["id"]).update(
            dirpath=dirpath, filename=filename
        )
    # If content_filepath is null and title is not, slug-ify it for the filename field
    content_qset = (
        WebsiteContent.objects.filter(content_filepath=None)
        .exclude(title=None)
        .values("id", "title")
    )
    for content_dict in content_qset:
        filename = slugify(content_dict["title"])[0:CONTENT_FILENAME_MAX_LEN]
        WebsiteContent.objects.filter(id=content_dict["id"]).update(filename=filename)
    # For all other records, just use the text_id as the filename
    content_qset = WebsiteContent.objects.filter(
        content_filepath=None, title=None
    ).values("id", "text_id")
    for content_dict in content_qset:
        WebsiteContent.objects.filter(id=content_dict["id"]).update(
            filename=content_dict["text_id"]
        )


class Migration(migrations.Migration):
    dependencies = [
        ("websites", "0022_website_content_safedelete"),
    ]

    operations = [
        migrations.AddField(
            model_name="websitecontent",
            name="filename",
            field=models.CharField(
                blank=True, max_length=CONTENT_FILENAME_MAX_LEN, null=True
            ),
        ),
        migrations.AddField(
            model_name="websitecontent",
            name="dirpath",
            field=models.CharField(blank=True, max_length=300, null=True),
        ),
        migrations.RunPython(
            backpopulate_filename_and_dirpath, migrations.RunPython.noop
        ),
    ]
