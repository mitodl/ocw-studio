# Generated by Django 3.1.14 on 2023-01-26 20:48

from django.db import migrations
from os import path


def migrate_fields_forward(apps, schema_editor):
    migrate_field(apps, True)


def migrate_fields_backward(apps, schema_editor):
    migrate_field(apps, False)


def insert_static_resources_prefix(path):
    if not "static_resources/" in path:
        resource_file_parts = path.split(path)
        resource_file_parts.insert(len(resource_file_parts) - 1, "static_resources")
        return f"/{'/'.join(resource_file_parts)}"
    else:
        return path


def update_resource(resource):
    if "file" in resource.metadata.keys():
        resource_file = resource.metadata["file"]
        if resource_file:
            resource.metadata["file"] = insert_static_resources_prefix(resource_file)


def rollback_resource(resource):
    if "file" in resource.metadata.keys():
        if resource.metadata["file"]:
            resource.metadata["file"] = resource.metadata["file"].replace(
                "static_resources/", ""
            )


def migrate_field(apps, forward):
    DriveFile = apps.get_model("gdrive_sync", "DriveFile")
    WebsiteContent = apps.get_model("websites", "WebsiteContent")

    # Get all DriveFile objects that don't have a blank or null s3_key
    drive_files = DriveFile.objects.exclude(s3_key__isnull=True).exclude(
        s3_key__exact=""
    )
    # Get all resource WebsiteContent objects that do not have a DriveFile
    drive_files_with_resources = drive_files.filter(resource__isnull=False)
    resources_with_drive_files = WebsiteContent.objects.filter(type="resource").filter(
        text_id__in=drive_files_with_resources
    )
    resources_without_drive_files = WebsiteContent.objects.filter(
        type="resource"
    ).exclude(text_id__in=drive_files_with_resources)
    if forward:
        for file in drive_files:
            file.s3_key = insert_static_resources_prefix(file.s3_key)
            if file.resource:
                resource = file.resource
                update_resource(resource)
        for resource in resources_without_drive_files:
            update_resource(resource)
    if not forward:
        for file in drive_files:
            file.s3_key = file.s3_key.replace("static_resources/", "")
            resource = file.resource
            if resource:
                rollback_resource(resource)
        for resource in resources_without_drive_files:
            rollback_resource(resource)
    DriveFile.objects.bulk_update(drive_files, ["s3_key"])
    WebsiteContent.objects.bulk_update(resources_with_drive_files, ["file"])
    WebsiteContent.objects.bulk_update(resources_without_drive_files, ["file"])


class Migration(migrations.Migration):

    dependencies = [
        ("websites", "0052_resource_description_to_body"),
    ]

    operations = [migrations.RunPython(migrate_fields_forward, migrate_fields_backward)]
